/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ShareIndexImport } from './routes/share/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as RecycleIndexImport } from './routes/recycle/index'
import { Route as HomeIndexImport } from './routes/home/index'
import { Route as UserRegisterIndexImport } from './routes/user/register/index'
import { Route as UserLoginIndexImport } from './routes/user/login/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ShareIndexRoute = ShareIndexImport.update({
  id: '/share/',
  path: '/share/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const RecycleIndexRoute = RecycleIndexImport.update({
  id: '/recycle/',
  path: '/recycle/',
  getParentRoute: () => rootRoute,
} as any)

const HomeIndexRoute = HomeIndexImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRoute,
} as any)

const UserRegisterIndexRoute = UserRegisterIndexImport.update({
  id: '/user/register/',
  path: '/user/register/',
  getParentRoute: () => rootRoute,
} as any)

const UserLoginIndexRoute = UserLoginIndexImport.update({
  id: '/user/login/',
  path: '/user/login/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexImport
      parentRoute: typeof rootRoute
    }
    '/recycle/': {
      id: '/recycle/'
      path: '/recycle'
      fullPath: '/recycle'
      preLoaderRoute: typeof RecycleIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/share/': {
      id: '/share/'
      path: '/share'
      fullPath: '/share'
      preLoaderRoute: typeof ShareIndexImport
      parentRoute: typeof rootRoute
    }
    '/user/login/': {
      id: '/user/login/'
      path: '/user/login'
      fullPath: '/user/login'
      preLoaderRoute: typeof UserLoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/user/register/': {
      id: '/user/register/'
      path: '/user/register'
      fullPath: '/user/register'
      preLoaderRoute: typeof UserRegisterIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeIndexRoute
  '/recycle': typeof RecycleIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/share': typeof ShareIndexRoute
  '/user/login': typeof UserLoginIndexRoute
  '/user/register': typeof UserRegisterIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeIndexRoute
  '/recycle': typeof RecycleIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/share': typeof ShareIndexRoute
  '/user/login': typeof UserLoginIndexRoute
  '/user/register': typeof UserRegisterIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/home/': typeof HomeIndexRoute
  '/recycle/': typeof RecycleIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/share/': typeof ShareIndexRoute
  '/user/login/': typeof UserLoginIndexRoute
  '/user/register/': typeof UserRegisterIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/recycle'
    | '/settings'
    | '/share'
    | '/user/login'
    | '/user/register'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/recycle'
    | '/settings'
    | '/share'
    | '/user/login'
    | '/user/register'
  id:
    | '__root__'
    | '/'
    | '/home/'
    | '/recycle/'
    | '/settings/'
    | '/share/'
    | '/user/login/'
    | '/user/register/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeIndexRoute: typeof HomeIndexRoute
  RecycleIndexRoute: typeof RecycleIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  ShareIndexRoute: typeof ShareIndexRoute
  UserLoginIndexRoute: typeof UserLoginIndexRoute
  UserRegisterIndexRoute: typeof UserRegisterIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  RecycleIndexRoute: RecycleIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  ShareIndexRoute: ShareIndexRoute,
  UserLoginIndexRoute: UserLoginIndexRoute,
  UserRegisterIndexRoute: UserRegisterIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/home/",
        "/recycle/",
        "/settings/",
        "/share/",
        "/user/login/",
        "/user/register/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/home/": {
      "filePath": "home/index.tsx"
    },
    "/recycle/": {
      "filePath": "recycle/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/share/": {
      "filePath": "share/index.tsx"
    },
    "/user/login/": {
      "filePath": "user/login/index.tsx"
    },
    "/user/register/": {
      "filePath": "user/register/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
